diff --git a/quickjs.c b/quickjs.c
index 5d833b0..5e776da 100644
--- a/quickjs.c
+++ b/quickjs.c
@@ -49462,16 +49462,15 @@ static JSValue js_dataview_getValue(JSContext *ctx,
 {
     JSTypedArray *ta;
     JSArrayBuffer *abuf;
-    int is_swap, size;
+    int is_swap;
     uint8_t *ptr;
     uint32_t v;
-    uint64_t pos;
+    int64_t pos;
 
     ta = JS_GetOpaque2(ctx, this_obj, JS_CLASS_DATAVIEW);
     if (!ta)
         return JS_EXCEPTION;
-    size = 1 << typed_array_size_log2(class_id);
-    if (JS_ToIndex(ctx, &pos, argv[0]))
+    if (JS_ToInt64Sat(ctx, &pos, argv[0]))
         return JS_EXCEPTION;
     is_swap = FALSE;
     if (argc > 1)
@@ -49482,8 +49481,6 @@ static JSValue js_dataview_getValue(JSContext *ctx,
     abuf = ta->buffer->u.array_buffer;
     if (abuf->detached)
         return JS_ThrowTypeErrorDetachedArrayBuffer(ctx);
-    if ((pos + size) > ta->length)
-        return JS_ThrowRangeError(ctx, "out of bound");
     ptr = abuf->data + ta->offset + pos;
 
     switch(class_id) {
@@ -49565,7 +49562,7 @@ static JSValue js_dataview_setValue(JSContext *ctx,
 {
     JSTypedArray *ta;
     JSArrayBuffer *abuf;
-    int is_swap, size;
+    int is_swap;
     uint8_t *ptr;
     uint64_t v64;
     uint32_t v;
@@ -49575,8 +49572,7 @@ static JSValue js_dataview_setValue(JSContext *ctx,
     ta = JS_GetOpaque2(ctx, this_obj, JS_CLASS_DATAVIEW);
     if (!ta)
         return JS_EXCEPTION;
-    size = 1 << typed_array_size_log2(class_id);
-    if (JS_ToIndex(ctx, &pos, argv[0]))
+    if (JS_ToInt64Sat(ctx, &pos, argv[0]))
         return JS_EXCEPTION;
     val = argv[1];
     v = 0; /* avoid warning */
@@ -49617,8 +49613,6 @@ static JSValue js_dataview_setValue(JSContext *ctx,
     abuf = ta->buffer->u.array_buffer;
     if (abuf->detached)
         return JS_ThrowTypeErrorDetachedArrayBuffer(ctx);
-    if ((pos + size) > ta->length)
-        return JS_ThrowRangeError(ctx, "out of bound");
     ptr = abuf->data + ta->offset + pos;
 
     switch(class_id) {
