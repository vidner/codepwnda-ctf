diff --git quickjs-libc.c quickjs-libc.c
index 4d248b6..c64f3f5 100644
--- quickjs-libc.c
+++ quickjs-libc.c
@@ -1691,6 +1691,76 @@ JSModuleDef *js_init_module_os(JSContext *ctx, const char *module_name)
 
 /**********************************************************/
 
+static const char* tag_name[] = {
+    "JS_TAG_FIRST", //       = -10,
+    "JS_TAG_BIG_INT", //     = -10,
+    "JS_TAG_BIG_FLOAT", //   = -9,
+    "JS_TAG_SYMBOL", //      = -8,
+    "JS_TAG_STRING", //      = -7,
+    "JS_TAG_SHAPE", //       = -6,
+    "JS_TAG_ASYNC_FUNCTION", // = -5,
+    "JS_TAG_VAR_REF", //     = -4,
+    "JS_TAG_MODULE", //      = -3,
+    "JS_TAG_FUNCTION_BYTECODE", // = -2,
+    "JS_TAG_OBJECT", //      = -1,
+    "JS_TAG_INT", //         = 0,
+    "JS_TAG_BOOL", //        = 1,
+    "JS_TAG_NULL", //        = 2,
+    "JS_TAG_UNDEFINED", //   = 3,
+    "JS_TAG_UNINITIALIZED", // = 4,
+    "JS_TAG_CATCH_OFFSET", // = 5,
+    "JS_TAG_EXCEPTION", //   = 6,
+    "JS_TAG_FLOAT64", //     = 7,
+    "JS_TAG_UNKNOWN", //     default,
+};
+
+static const char* get_tag_name(int tag)
+{
+    switch (tag) {
+        case -10: return tag_name[1];
+        case -9: return tag_name[2];
+        case -8: return tag_name[3];
+        case -7: return tag_name[4];
+        case -6: return tag_name[5];
+        case -5: return tag_name[6];
+        case -4: return tag_name[7];
+        case -3: return tag_name[8];
+        case -2: return tag_name[9];
+        case -1: return tag_name[10];
+        case 0: return tag_name[11];
+        case 1: return tag_name[12];
+        case 2: return tag_name[13];
+        case 3: return tag_name[14];
+        case 4: return tag_name[15];
+        case 5: return tag_name[16];
+        case 6: return tag_name[17];
+        case 7: return tag_name[18];
+        default: return tag_name[19];
+    }
+}
+
+static JSValue js_dbg(JSContext *ctx, JSValueConst this_val,
+                      int argc, JSValueConst *argv)
+{
+    __asm__("int $0x3");
+    return JS_UNDEFINED;
+}
+
+static JSValue js_describe(JSContext *ctx, JSValueConst this_val,
+                      int argc, JSValueConst *argv)
+{
+    fprintf(stdout, "JSvalue = .u {\n\t.int: %x\n", JS_VALUE_GET_INT(argv[0]));
+    fprintf(stdout, "\t.f64: %lf\n", JS_VALUE_GET_FLOAT64(argv[0]));
+    fprintf(stdout, "\t.ptr: %p\n", JS_VALUE_GET_PTR(argv[0]));
+    fprintf(stdout, "}, .tag: %d (%s)\n", JS_VALUE_GET_TAG(argv[0]), get_tag_name(JS_VALUE_GET_TAG(argv[0])));
+
+    if (JS_VALUE_GET_TAG(argv[0]) == JS_TAG_OBJECT) {
+        fprintf(stdout, "JSObject.u.opaque: %p\n", *(void**)(JS_VALUE_GET_PTR(argv[0]) + 0x30) );
+    }
+
+    return JS_UNDEFINED;
+}
+
 static JSValue js_print(JSContext *ctx, JSValueConst this_val,
                               int argc, JSValueConst *argv)
 {
@@ -1735,6 +1805,11 @@ void js_std_add_helpers(JSContext *ctx, int argc, char **argv)
     JS_SetPropertyStr(ctx, global_obj, "__loadScript",
                       JS_NewCFunction(ctx, js_loadScript, "__loadScript", 1));
     
+    JS_SetPropertyStr(ctx, global_obj, "dbg",
+                      JS_NewCFunction(ctx, js_dbg, "dbg", 0));
+    JS_SetPropertyStr(ctx, global_obj, "describe",
+                      JS_NewCFunction(ctx, js_describe, "describe", 1));
+
     JS_FreeValue(ctx, global_obj);
 
     /* XXX: not multi-context */
